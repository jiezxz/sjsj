(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-4e269d63"],{"33e1":function(t,e,o){"use strict";var n;o.d(e,"a",(function(){return n})),function(t){t[t["Trace"]=0]="Trace",t[t["Debug"]=1]="Debug",t[t["Information"]=2]="Information",t[t["Warning"]=3]="Warning",t[t["Error"]=4]="Error",t[t["Critical"]=5]="Critical",t[t["None"]=6]="None"}(n||(n={}))},"7ed1":function(t,e,o){"use strict";(function(t,n){o.d(e,"a",(function(){return a})),o.d(e,"c",(function(){return c})),o.d(e,"f",(function(){return l})),o.d(e,"j",(function(){return g})),o.d(e,"k",(function(){return u})),o.d(e,"e",(function(){return d})),o.d(e,"d",(function(){return p})),o.d(e,"b",(function(){return _})),o.d(e,"i",(function(){return f})),o.d(e,"g",(function(){return v})),o.d(e,"h",(function(){return S}));var r=o("33e1"),s=o("bf71");const i="6.0.4";class a{static isRequired(t,e){if(null===t||void 0===t)throw new Error(`The '${e}' argument is required.`)}static isNotEmpty(t,e){if(!t||t.match(/^\s*$/))throw new Error(`The '${e}' argument should not be empty.`)}static isIn(t,e,o){if(!(t in e))throw new Error(`Unknown ${o} value: ${t}.`)}}class c{static get isBrowser(){return"object"===typeof window&&"object"===typeof window.document}static get isWebWorker(){return"object"===typeof self&&"importScripts"in self}static get isReactNative(){return"object"===typeof window&&"undefined"===typeof window.document}static get isNode(){return!this.isBrowser&&!this.isWebWorker&&!this.isReactNative}}function l(t,e){let o="";return g(t)?(o="Binary data of length "+t.byteLength,e&&(o+=`. Content: '${h(t)}'`)):"string"===typeof t&&(o="String data of length "+t.length,e&&(o+=`. Content: '${t}'`)),o}function h(t){const e=new Uint8Array(t);let o="";return e.forEach(t=>{const e=t<16?"0":"";o+=`0x${e}${t.toString(16)} `}),o.substr(0,o.length-1)}function g(t){return t&&"undefined"!==typeof ArrayBuffer&&(t instanceof ArrayBuffer||t.constructor&&"ArrayBuffer"===t.constructor.name)}async function u(t,e,o,n,s,i,a){let c={};if(s){const t=await s();t&&(c={["Authorization"]:"Bearer "+t})}const[h,u]=f();c[h]=u,t.log(r["a"].Trace,`(${e} transport) sending data. ${l(i,a.logMessageContent)}.`);const d=g(i)?"arraybuffer":"text",p=await o.post(n,{content:i,headers:{...c,...a.headers},responseType:d,timeout:a.timeout,withCredentials:a.withCredentials});t.log(r["a"].Trace,`(${e} transport) request complete. Response status: ${p.statusCode}.`)}function d(t){return void 0===t?new _(r["a"].Information):null===t?s["a"].instance:void 0!==t.log?t:new _(t)}class p{constructor(t,e){this._subject=t,this._observer=e}dispose(){const t=this._subject.observers.indexOf(this._observer);t>-1&&this._subject.observers.splice(t,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(t=>{})}}class _{constructor(t){this._minLevel=t,this.out=console}log(t,e){if(t>=this._minLevel){const o=`[${(new Date).toISOString()}] ${r["a"][t]}: ${e}`;switch(t){case r["a"].Critical:case r["a"].Error:this.out.error(o);break;case r["a"].Warning:this.out.warn(o);break;case r["a"].Information:this.out.info(o);break;default:this.out.log(o);break}}}}function f(){let t="X-SignalR-User-Agent";return c.isNode&&(t="User-Agent"),[t,w(i,m(),y(),b())]}function w(t,e,o,n){let r="Microsoft SignalR/";const s=t.split(".");return r+=`${s[0]}.${s[1]}`,r+=` (${t}; `,r+=e&&""!==e?e+"; ":"Unknown OS; ",r+=""+o,r+=n?"; "+n:"; Unknown Runtime Version",r+=")",r}function m(){if(!c.isNode)return"";switch(t.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return t.platform}}function b(){if(c.isNode)return t.versions.node}function y(){return c.isNode?"NodeJS":"Browser"}function v(t){return t.stack?t.stack:t.message?t.message:""+t}function S(){if("undefined"!==typeof globalThis)return globalThis;if("undefined"!==typeof self)return self;if("undefined"!==typeof window)return window;if("undefined"!==typeof n)return n;throw new Error("could not find global")}}).call(this,o("4362"),o("c8ba"))},bad4:function(t,e,o){"use strict";o.d(e,"a",(function(){return J}));const n=[0,2e3,1e4,3e4,null];class r{constructor(t){this._retryDelays=void 0!==t?[...t,null]:n}nextRetryDelayInMilliseconds(t){return this._retryDelays[t.previousRetryCount]}}class s extends Error{constructor(t,e){const o=new.target.prototype;super(`${t}: Status code '${e}'`),this.statusCode=e,this.__proto__=o}}class i extends Error{constructor(t="A timeout occurred."){const e=new.target.prototype;super(t),this.__proto__=e}}class a extends Error{constructor(t="An abort occurred."){const e=new.target.prototype;super(t),this.__proto__=e}}class c extends Error{constructor(t,e){const o=new.target.prototype;super(t),this.transport=e,this.errorType="UnsupportedTransportError",this.__proto__=o}}class l extends Error{constructor(t,e){const o=new.target.prototype;super(t),this.transport=e,this.errorType="DisabledTransportError",this.__proto__=o}}class h extends Error{constructor(t,e){const o=new.target.prototype;super(t),this.transport=e,this.errorType="FailedToStartTransportError",this.__proto__=o}}class g extends Error{constructor(t){const e=new.target.prototype;super(t),this.errorType="FailedToNegotiateWithServerError",this.__proto__=e}}class u extends Error{constructor(t,e){const o=new.target.prototype;super(t),this.innerErrors=e,this.__proto__=o}}class d{constructor(t,e,o){this.statusCode=t,this.statusText=e,this.content=o}}class p{get(t,e){return this.send({...e,method:"GET",url:t})}post(t,e){return this.send({...e,method:"POST",url:t})}delete(t,e){return this.send({...e,method:"DELETE",url:t})}getCookieString(t){return""}}var _,f,w=o("33e1"),m=o("7ed1");class b extends p{constructor(t){if(super(),this._logger=t,"undefined"===typeof fetch){const t=require;this._jar=new(t("tough-cookie").CookieJar),this._fetchType=t("node-fetch"),this._fetchType=t("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(Object(m["h"])());if("undefined"===typeof AbortController){const t=require;this._abortControllerType=t("abort-controller")}else this._abortControllerType=AbortController}async send(t){if(t.abortSignal&&t.abortSignal.aborted)throw new a;if(!t.method)throw new Error("No method defined.");if(!t.url)throw new Error("No url defined.");const e=new this._abortControllerType;let o;t.abortSignal&&(t.abortSignal.onabort=()=>{e.abort(),o=new a});let n,r=null;if(t.timeout){const n=t.timeout;r=setTimeout(()=>{e.abort(),this._logger.log(w["a"].Warning,"Timeout from HTTP request."),o=new i},n)}try{n=await this._fetchType(t.url,{body:t.content,cache:"no-cache",credentials:!0===t.withCredentials?"include":"same-origin",headers:{"Content-Type":"text/plain;charset=UTF-8","X-Requested-With":"XMLHttpRequest",...t.headers},method:t.method,mode:"cors",redirect:"follow",signal:e.signal})}catch(h){if(o)throw o;throw this._logger.log(w["a"].Warning,`Error from HTTP request. ${h}.`),h}finally{r&&clearTimeout(r),t.abortSignal&&(t.abortSignal.onabort=null)}if(!n.ok){const t=await y(n,"text");throw new s(t||n.statusText,n.status)}const c=y(n,t.responseType),l=await c;return new d(n.status,n.statusText,l)}getCookieString(t){let e="";return m["c"].isNode&&this._jar&&this._jar.getCookies(t,(t,o)=>e=o.join("; ")),e}}function y(t,e){let o;switch(e){case"arraybuffer":o=t.arrayBuffer();break;case"text":o=t.text();break;case"blob":case"document":case"json":throw new Error(e+" is not supported.");default:o=t.text();break}return o}class v extends p{constructor(t){super(),this._logger=t}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new a):t.method?t.url?new Promise((e,o)=>{const n=new XMLHttpRequest;n.open(t.method,t.url,!0),n.withCredentials=void 0===t.withCredentials||t.withCredentials,n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.setRequestHeader("Content-Type","text/plain;charset=UTF-8");const r=t.headers;r&&Object.keys(r).forEach(t=>{n.setRequestHeader(t,r[t])}),t.responseType&&(n.responseType=t.responseType),t.abortSignal&&(t.abortSignal.onabort=()=>{n.abort(),o(new a)}),t.timeout&&(n.timeout=t.timeout),n.onload=()=>{t.abortSignal&&(t.abortSignal.onabort=null),n.status>=200&&n.status<300?e(new d(n.status,n.statusText,n.response||n.responseText)):o(new s(n.response||n.responseText||n.statusText,n.status))},n.onerror=()=>{this._logger.log(w["a"].Warning,`Error from HTTP request. ${n.status}: ${n.statusText}.`),o(new s(n.statusText,n.status))},n.ontimeout=()=>{this._logger.log(w["a"].Warning,"Timeout from HTTP request."),o(new i)},n.send(t.content||"")}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class S extends p{constructor(t){if(super(),"undefined"!==typeof fetch||m["c"].isNode)this._httpClient=new b(t);else{if("undefined"===typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this._httpClient=new v(t)}}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new a):t.method?t.url?this._httpClient.send(t):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(t){return this._httpClient.getCookieString(t)}}class C{}C.Authorization="Authorization",C.Cookie="Cookie",function(t){t[t["None"]=0]="None",t[t["WebSockets"]=1]="WebSockets",t[t["ServerSentEvents"]=2]="ServerSentEvents",t[t["LongPolling"]=4]="LongPolling"}(_||(_={})),function(t){t[t["Text"]=1]="Text",t[t["Binary"]=2]="Binary"}(f||(f={}));class k{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}}class E{constructor(t,e,o,n){this._httpClient=t,this._accessTokenFactory=e,this._logger=o,this._pollAbort=new k,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this._pollAbort.aborted}async connect(t,e){if(m["a"].isRequired(t,"url"),m["a"].isRequired(e,"transferFormat"),m["a"].isIn(e,f,"transferFormat"),this._url=t,this._logger.log(w["a"].Trace,"(LongPolling transport) Connecting."),e===f.Binary&&"undefined"!==typeof XMLHttpRequest&&"string"!==typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[o,n]=Object(m["i"])(),r={[o]:n,...this._options.headers},i={abortSignal:this._pollAbort.signal,headers:r,timeout:1e5,withCredentials:this._options.withCredentials};e===f.Binary&&(i.responseType="arraybuffer");const a=await this._getAccessToken();this._updateHeaderToken(i,a);const c=`${t}&_=${Date.now()}`;this._logger.log(w["a"].Trace,`(LongPolling transport) polling: ${c}.`);const l=await this._httpClient.get(c,i);200!==l.statusCode?(this._logger.log(w["a"].Error,`(LongPolling transport) Unexpected response code: ${l.statusCode}.`),this._closeError=new s(l.statusText||"",l.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,i)}async _getAccessToken(){return this._accessTokenFactory?await this._accessTokenFactory():null}_updateHeaderToken(t,e){t.headers||(t.headers={}),e?t.headers[C.Authorization]="Bearer "+e:t.headers[C.Authorization]&&delete t.headers[C.Authorization]}async _poll(t,e){try{while(this._running){const n=await this._getAccessToken();this._updateHeaderToken(e,n);try{const o=`${t}&_=${Date.now()}`;this._logger.log(w["a"].Trace,`(LongPolling transport) polling: ${o}.`);const n=await this._httpClient.get(o,e);204===n.statusCode?(this._logger.log(w["a"].Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==n.statusCode?(this._logger.log(w["a"].Error,`(LongPolling transport) Unexpected response code: ${n.statusCode}.`),this._closeError=new s(n.statusText||"",n.statusCode),this._running=!1):n.content?(this._logger.log(w["a"].Trace,`(LongPolling transport) data received. ${Object(m["f"])(n.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(n.content)):this._logger.log(w["a"].Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(o){this._running?o instanceof i?this._logger.log(w["a"].Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=o,this._running=!1):this._logger.log(w["a"].Trace,"(LongPolling transport) Poll errored after shutdown: "+o.message)}}}finally{this._logger.log(w["a"].Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(t){return this._running?Object(m["k"])(this._logger,"LongPolling",this._httpClient,this._url,this._accessTokenFactory,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(w["a"].Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(w["a"].Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const t={},[e,o]=Object(m["i"])();t[e]=o;const n={headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials},r=await this._getAccessToken();this._updateHeaderToken(n,r),await this._httpClient.delete(this._url,n),this._logger.log(w["a"].Trace,"(LongPolling transport) DELETE request sent.")}finally{this._logger.log(w["a"].Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let t="(LongPolling transport) Firing onclose event.";this._closeError&&(t+=" Error: "+this._closeError),this._logger.log(w["a"].Trace,t),this.onclose(this._closeError)}}}class T{constructor(t,e,o,n){this._httpClient=t,this._accessTokenFactory=e,this._logger=o,this._options=n,this.onreceive=null,this.onclose=null}async connect(t,e){if(m["a"].isRequired(t,"url"),m["a"].isRequired(e,"transferFormat"),m["a"].isIn(e,f,"transferFormat"),this._logger.log(w["a"].Trace,"(SSE transport) Connecting."),this._url=t,this._accessTokenFactory){const e=await this._accessTokenFactory();e&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(e))}return new Promise((o,n)=>{let r,s=!1;if(e===f.Text){if(m["c"].isBrowser||m["c"].isWebWorker)r=new this._options.EventSource(t,{withCredentials:this._options.withCredentials});else{const e=this._httpClient.getCookieString(t),o={};o.Cookie=e;const[n,s]=Object(m["i"])();o[n]=s,r=new this._options.EventSource(t,{withCredentials:this._options.withCredentials,headers:{...o,...this._options.headers}})}try{r.onmessage=t=>{if(this.onreceive)try{this._logger.log(w["a"].Trace,`(SSE transport) data received. ${Object(m["f"])(t.data,this._options.logMessageContent)}.`),this.onreceive(t.data)}catch(e){return void this._close(e)}},r.onerror=t=>{s?this._close():n(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},r.onopen=()=>{this._logger.log(w["a"].Information,"SSE connected to "+this._url),this._eventSource=r,s=!0,o()}}catch(i){return void n(i)}}else n(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})}async send(t){return this._eventSource?Object(m["k"])(this._logger,"SSE",this._httpClient,this._url,this._accessTokenFactory,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(t){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(t))}}class I{constructor(t,e,o,n,r,s){this._logger=o,this._accessTokenFactory=e,this._logMessageContent=n,this._webSocketConstructor=r,this._httpClient=t,this.onreceive=null,this.onclose=null,this._headers=s}async connect(t,e){if(m["a"].isRequired(t,"url"),m["a"].isRequired(e,"transferFormat"),m["a"].isIn(e,f,"transferFormat"),this._logger.log(w["a"].Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory){const e=await this._accessTokenFactory();e&&(t+=(t.indexOf("?")<0?"?":"&")+"access_token="+encodeURIComponent(e))}return new Promise((o,n)=>{let r;t=t.replace(/^http/,"ws");const s=this._httpClient.getCookieString(t);let i=!1;if(m["c"].isNode){const e={},[o,n]=Object(m["i"])();e[o]=n,s&&(e[C.Cookie]=""+s),r=new this._webSocketConstructor(t,void 0,{headers:{...e,...this._headers}})}r||(r=new this._webSocketConstructor(t)),e===f.Binary&&(r.binaryType="arraybuffer"),r.onopen=e=>{this._logger.log(w["a"].Information,`WebSocket connected to ${t}.`),this._webSocket=r,i=!0,o()},r.onerror=t=>{let e=null;e="undefined"!==typeof ErrorEvent&&t instanceof ErrorEvent?t.error:"There was an error with the transport",this._logger.log(w["a"].Information,`(WebSockets transport) ${e}.`)},r.onmessage=t=>{if(this._logger.log(w["a"].Trace,`(WebSockets transport) data received. ${Object(m["f"])(t.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(t.data)}catch(e){return void this._close(e)}},r.onclose=t=>{if(i)this._close(t);else{let e=null;e="undefined"!==typeof ErrorEvent&&t instanceof ErrorEvent?t.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",n(new Error(e))}}})}send(t){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(w["a"].Trace,`(WebSockets transport) sending data. ${Object(m["f"])(t,this._logMessageContent)}.`),this._webSocket.send(t),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(t){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(w["a"].Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(t)||!1!==t.wasClean&&1e3===t.code?t instanceof Error?this.onclose(t):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${t.code} (${t.reason||"no reason given"}).`)))}_isCloseEvent(t){return t&&"boolean"===typeof t.wasClean&&"number"===typeof t.code}}const P=100;class D{constructor(t,e={}){if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,m["a"].isRequired(t,"url"),this._logger=Object(m["e"])(e.logger),this.baseUrl=this._resolveUrl(t),e=e||{},e.logMessageContent=void 0!==e.logMessageContent&&e.logMessageContent,"boolean"!==typeof e.withCredentials&&void 0!==e.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");e.withCredentials=void 0===e.withCredentials||e.withCredentials,e.timeout=void 0===e.timeout?1e5:e.timeout;let o=null,n=null;if(m["c"].isNode){const t=require;o=t("ws"),n=t("eventsource")}m["c"].isNode||"undefined"===typeof WebSocket||e.WebSocket?m["c"].isNode&&!e.WebSocket&&o&&(e.WebSocket=o):e.WebSocket=WebSocket,m["c"].isNode||"undefined"===typeof EventSource||e.EventSource?m["c"].isNode&&!e.EventSource&&"undefined"!==typeof n&&(e.EventSource=n):e.EventSource=EventSource,this._httpClient=e.httpClient||new S(this._logger),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=e,this.onreceive=null,this.onclose=null}async start(t){if(t=t||f.Binary,m["a"].isIn(t,f,"transferFormat"),this._logger.log(w["a"].Debug,`Starting connection with transfer format '${f[t]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(t),await this._startInternalPromise,"Disconnecting"===this._connectionState){const t="Failed to start the HttpConnection before stop() was called.";return this._logger.log(w["a"].Error,t),await this._stopPromise,Promise.reject(new Error(t))}if("Connected"!==this._connectionState){const t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(w["a"].Error,t),Promise.reject(new Error(t))}this._connectionStarted=!0}send(t){return"Connected"!==this._connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new R(this.transport)),this._sendQueue.send(t))}async stop(t){return"Disconnected"===this._connectionState?(this._logger.log(w["a"].Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(w["a"].Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise(t=>{this._stopPromiseResolver=t}),await this._stopInternal(t),void await this._stopPromise)}async _stopInternal(t){this._stopError=t;try{await this._startInternalPromise}catch(e){}if(this.transport){try{await this.transport.stop()}catch(e){this._logger.log(w["a"].Error,`HttpConnection.transport.stop() threw error '${e}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(w["a"].Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(t){let e=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==_.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(_.WebSockets),await this._startTransport(e,t)}else{let o=null,n=0;do{if(o=await this._getNegotiationResponse(e),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new Error("The connection was stopped during negotiation.");if(o.error)throw new Error(o.error);if(o.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(o.url&&(e=o.url),o.accessToken){const t=o.accessToken;this._accessTokenFactory=()=>t}n++}while(o.url&&n<P);if(n===P&&o.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(e,this._options.transport,o,t)}this.transport instanceof E&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(w["a"].Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(o){return this._logger.log(w["a"].Error,"Failed to start the connection: "+o),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(o)}}async _getNegotiationResponse(t){const e={};if(this._accessTokenFactory){const t=await this._accessTokenFactory();t&&(e[C.Authorization]="Bearer "+t)}const[o,n]=Object(m["i"])();e[o]=n;const r=this._resolveNegotiateUrl(t);this._logger.log(w["a"].Debug,`Sending negotiation request: ${r}.`);try{const t=await this._httpClient.post(r,{content:"",headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==t.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${t.statusCode}'`));const o=JSON.parse(t.content);return(!o.negotiateVersion||o.negotiateVersion<1)&&(o.connectionToken=o.connectionId),o}catch(i){let t="Failed to complete negotiation with the server: "+i;return i instanceof s&&404===i.statusCode&&(t+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(w["a"].Error,t),Promise.reject(new g(t))}}_createConnectUrl(t,e){return e?t+(-1===t.indexOf("?")?"?":"&")+"id="+e:t}async _createTransport(t,e,o,n){let r=this._createConnectUrl(t,o.connectionToken);if(this._isITransport(e))return this._logger.log(w["a"].Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=e,await this._startTransport(r,n),void(this.connectionId=o.connectionId);const s=[],i=o.availableTransports||[];let a=o;for(const l of i){const o=this._resolveTransportOrError(l,e,n);if(o instanceof Error)s.push(l.transport+" failed:"),s.push(o);else if(this._isITransport(o)){if(this.transport=o,!a){try{a=await this._getNegotiationResponse(t)}catch(c){return Promise.reject(c)}r=this._createConnectUrl(t,a.connectionToken)}try{return await this._startTransport(r,n),void(this.connectionId=a.connectionId)}catch(c){if(this._logger.log(w["a"].Error,`Failed to start the transport '${l.transport}': ${c}`),a=void 0,s.push(new h(`${l.transport} failed: ${c}`,_[l.transport])),"Connecting"!==this._connectionState){const t="Failed to select transport before stop() was called.";return this._logger.log(w["a"].Debug,t),Promise.reject(new Error(t))}}}}return s.length>0?Promise.reject(new u("Unable to connect to the server with any of the available transports. "+s.join(" "),s)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(t){switch(t){case _.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new I(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case _.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new T(this._httpClient,this._accessTokenFactory,this._logger,this._options);case _.LongPolling:return new E(this._httpClient,this._accessTokenFactory,this._logger,this._options);default:throw new Error(`Unknown transport: ${t}.`)}}_startTransport(t,e){return this.transport.onreceive=this.onreceive,this.transport.onclose=t=>this._stopConnection(t),this.transport.connect(t,e)}_resolveTransportOrError(t,e,o){const n=_[t.transport];if(null===n||void 0===n)return this._logger.log(w["a"].Debug,`Skipping transport '${t.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${t.transport}' because it is not supported by this client.`);if(!$(e,n))return this._logger.log(w["a"].Debug,`Skipping transport '${_[n]}' because it was disabled by the client.`),new l(`'${_[n]}' is disabled by the client.`,n);{const e=t.transferFormats.map(t=>f[t]);if(!(e.indexOf(o)>=0))return this._logger.log(w["a"].Debug,`Skipping transport '${_[n]}' because it does not support the requested transfer format '${f[o]}'.`),new Error(`'${_[n]}' does not support ${f[o]}.`);if(n===_.WebSockets&&!this._options.WebSocket||n===_.ServerSentEvents&&!this._options.EventSource)return this._logger.log(w["a"].Debug,`Skipping transport '${_[n]}' because it is not supported in your environment.'`),new c(`'${_[n]}' is not supported in your environment.`,n);this._logger.log(w["a"].Debug,`Selecting transport '${_[n]}'.`);try{return this._constructTransport(n)}catch(r){return r}}}_isITransport(t){return t&&"object"===typeof t&&"connect"in t}_stopConnection(t){if(this._logger.log(w["a"].Debug,`HttpConnection.stopConnection(${t}) called while in state ${this._connectionState}.`),this.transport=void 0,t=this._stopError||t,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(w["a"].Warning,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${t}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),t?this._logger.log(w["a"].Error,`Connection disconnected with error '${t}'.`):this._logger.log(w["a"].Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(t=>{this._logger.log(w["a"].Error,`TransportSendQueue.stop() threw error '${t}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(t)}catch(e){this._logger.log(w["a"].Error,`HttpConnection.onclose(${t}) threw error '${e}'.`)}}}else this._logger.log(w["a"].Debug,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(t){if(0===t.lastIndexOf("https://",0)||0===t.lastIndexOf("http://",0))return t;if(!m["c"].isBrowser)throw new Error(`Cannot resolve '${t}'.`);const e=window.document.createElement("a");return e.href=t,this._logger.log(w["a"].Information,`Normalizing '${t}' to '${e.href}'.`),e.href}_resolveNegotiateUrl(t){const e=t.indexOf("?");let o=t.substring(0,-1===e?t.length:e);return"/"!==o[o.length-1]&&(o+="/"),o+="negotiate",o+=-1===e?"":t.substring(e),-1===o.indexOf("negotiateVersion")&&(o+=-1===e?"?":"&",o+="negotiateVersion="+this._negotiateVersion),o}}function $(t,e){return!t||0!==(e&t)}class R{constructor(t){this._transport=t,this._buffer=[],this._executing=!0,this._sendBufferedData=new x,this._transportResult=new x,this._sendLoopPromise=this._sendLoop()}send(t){return this._bufferData(t),this._transportResult||(this._transportResult=new x),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(t){if(this._buffer.length&&typeof this._buffer[0]!==typeof t)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof t}`);this._buffer.push(t),this._sendBufferedData.resolve()}async _sendLoop(){while(1){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new x;const e=this._transportResult;this._transportResult=void 0;const o="string"===typeof this._buffer[0]?this._buffer.join(""):R._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(o),e.resolve()}catch(t){e.reject(t)}}}static _concatBuffers(t){const e=t.map(t=>t.byteLength).reduce((t,e)=>t+e),o=new Uint8Array(e);let n=0;for(const r of t)o.set(new Uint8Array(r),n),n+=r.byteLength;return o.buffer}}class x{constructor(){this.promise=new Promise((t,e)=>[this._resolver,this._rejecter]=[t,e])}resolve(){this._resolver()}reject(t){this._rejecter(t)}}class j{static write(t){return`${t}${j.RecordSeparator}`}static parse(t){if(t[t.length-1]!==j.RecordSeparator)throw new Error("Message is incomplete.");const e=t.split(j.RecordSeparator);return e.pop(),e}}j.RecordSeparatorCode=30,j.RecordSeparator=String.fromCharCode(j.RecordSeparatorCode);class H{writeHandshakeRequest(t){return j.write(JSON.stringify(t))}parseHandshakeResponse(t){let e,o;if(Object(m["j"])(t)){const n=new Uint8Array(t),r=n.indexOf(j.RecordSeparatorCode);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;e=String.fromCharCode.apply(null,Array.prototype.slice.call(n.slice(0,s))),o=n.byteLength>s?n.slice(s).buffer:null}else{const n=t,r=n.indexOf(j.RecordSeparator);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;e=n.substring(0,s),o=n.length>s?n.substring(s):null}const n=j.parse(e),r=JSON.parse(n[0]);if(r.type)throw new Error("Expected a handshake response from the server.");const s=r;return[o,s]}}var N;(function(t){t[t["Invocation"]=1]="Invocation",t[t["StreamItem"]=2]="StreamItem",t[t["Completion"]=3]="Completion",t[t["StreamInvocation"]=4]="StreamInvocation",t[t["CancelInvocation"]=5]="CancelInvocation",t[t["Ping"]=6]="Ping",t[t["Close"]=7]="Close"})(N||(N={}));class W{constructor(){this.observers=[]}next(t){for(const e of this.observers)e.next(t)}error(t){for(const e of this.observers)e.error&&e.error(t)}complete(){for(const t of this.observers)t.complete&&t.complete()}subscribe(t){return this.observers.push(t),new m["d"](this,t)}}const A=3e4,O=15e3;var M;(function(t){t["Disconnected"]="Disconnected",t["Connecting"]="Connecting",t["Connected"]="Connected",t["Disconnecting"]="Disconnecting",t["Reconnecting"]="Reconnecting"})(M||(M={}));class L{constructor(t,e,o,n){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(w["a"].Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},m["a"].isRequired(t,"connection"),m["a"].isRequired(e,"logger"),m["a"].isRequired(o,"protocol"),this.serverTimeoutInMilliseconds=A,this.keepAliveIntervalInMilliseconds=O,this._logger=e,this._protocol=o,this.connection=t,this._reconnectPolicy=n,this._handshakeProtocol=new H,this.connection.onreceive=t=>this._processIncomingData(t),this.connection.onclose=t=>this._connectionClosed(t),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=M.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:N.Ping})}static create(t,e,o,n){return new L(t,e,o,n)}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(t){if(this._connectionState!==M.Disconnected&&this._connectionState!==M.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!t)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=t}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==M.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=M.Connecting,this._logger.log(w["a"].Debug,"Starting HubConnection.");try{await this._startInternal(),m["c"].isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=M.Connected,this._connectionStarted=!0,this._logger.log(w["a"].Debug,"HubConnection connected successfully.")}catch(t){return this._connectionState=M.Disconnected,this._logger.log(w["a"].Debug,`HubConnection failed to start successfully because of error '${t}'.`),Promise.reject(t)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const t=new Promise((t,e)=>{this._handshakeResolver=t,this._handshakeRejecter=e});await this.connection.start(this._protocol.transferFormat);try{const e={protocol:this._protocol.name,version:this._protocol.version};if(this._logger.log(w["a"].Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(e)),this._logger.log(w["a"].Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await t,this._stopDuringStartError)throw this._stopDuringStartError}catch(e){throw this._logger.log(w["a"].Debug,`Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(e),e}}async stop(){const t=this._startPromise;this._stopPromise=this._stopInternal(),await this._stopPromise;try{await t}catch(e){}}_stopInternal(t){return this._connectionState===M.Disconnected?(this._logger.log(w["a"].Debug,`Call to HubConnection.stop(${t}) ignored because it is already in the disconnected state.`),Promise.resolve()):this._connectionState===M.Disconnecting?(this._logger.log(w["a"].Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState=M.Disconnecting,this._logger.log(w["a"].Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(w["a"].Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=t||new Error("The connection was stopped before the hub handshake could complete."),this.connection.stop(t)))}stream(t,...e){const[o,n]=this._replaceStreamingParams(e),r=this._createStreamInvocation(t,e,n);let s;const i=new W;return i.cancelCallback=()=>{const t=this._createCancelInvocation(r.invocationId);return delete this._callbacks[r.invocationId],s.then(()=>this._sendWithProtocol(t))},this._callbacks[r.invocationId]=(t,e)=>{e?i.error(e):t&&(t.type===N.Completion?t.error?i.error(new Error(t.error)):i.complete():i.next(t.item))},s=this._sendWithProtocol(r).catch(t=>{i.error(t),delete this._callbacks[r.invocationId]}),this._launchStreams(o,s),i}_sendMessage(t){return this._resetKeepAliveInterval(),this.connection.send(t)}_sendWithProtocol(t){return this._sendMessage(this._protocol.writeMessage(t))}send(t,...e){const[o,n]=this._replaceStreamingParams(e),r=this._sendWithProtocol(this._createInvocation(t,e,!0,n));return this._launchStreams(o,r),r}invoke(t,...e){const[o,n]=this._replaceStreamingParams(e),r=this._createInvocation(t,e,!1,n),s=new Promise((t,e)=>{this._callbacks[r.invocationId]=(o,n)=>{n?e(n):o&&(o.type===N.Completion?o.error?e(new Error(o.error)):t(o.result):e(new Error("Unexpected message type: "+o.type)))};const n=this._sendWithProtocol(r).catch(t=>{e(t),delete this._callbacks[r.invocationId]});this._launchStreams(o,n)});return s}on(t,e){t&&e&&(t=t.toLowerCase(),this._methods[t]||(this._methods[t]=[]),-1===this._methods[t].indexOf(e)&&this._methods[t].push(e))}off(t,e){if(!t)return;t=t.toLowerCase();const o=this._methods[t];if(o)if(e){const n=o.indexOf(e);-1!==n&&(o.splice(n,1),0===o.length&&delete this._methods[t])}else delete this._methods[t]}onclose(t){t&&this._closedCallbacks.push(t)}onreconnecting(t){t&&this._reconnectingCallbacks.push(t)}onreconnected(t){t&&this._reconnectedCallbacks.push(t)}_processIncomingData(t){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(t=this._processHandshakeResponse(t),this._receivedHandshakeResponse=!0),t){const o=this._protocol.parseMessages(t,this._logger);for(const t of o)switch(t.type){case N.Invocation:this._invokeClientMethod(t);break;case N.StreamItem:case N.Completion:{const o=this._callbacks[t.invocationId];if(o){t.type===N.Completion&&delete this._callbacks[t.invocationId];try{o(t)}catch(e){this._logger.log(w["a"].Error,"Stream callback threw error: "+Object(m["g"])(e))}}break}case N.Ping:break;case N.Close:{this._logger.log(w["a"].Information,"Close message received from server.");const e=t.error?new Error("Server returned an error on close: "+t.error):void 0;!0===t.allowReconnect?this.connection.stop(e):this._stopPromise=this._stopInternal(e);break}default:this._logger.log(w["a"].Warning,`Invalid message type: ${t.type}.`);break}}this._resetTimeoutPeriod()}_processHandshakeResponse(t){let e,o;try{[o,e]=this._handshakeProtocol.parseHandshakeResponse(t)}catch(n){const t="Error parsing handshake response: "+n;this._logger.log(w["a"].Error,t);const e=new Error(t);throw this._handshakeRejecter(e),e}if(e.error){const t="Server returned handshake error: "+e.error;this._logger.log(w["a"].Error,t);const o=new Error(t);throw this._handshakeRejecter(o),o}return this._logger.log(w["a"].Debug,"Server handshake complete."),this._handshakeResolver(),o}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if((!this.connection.features||!this.connection.features.inherentKeepAlive)&&(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),void 0===this._pingServerHandle)){let t=this._nextKeepAlive-(new Date).getTime();t<0&&(t=0),this._pingServerHandle=setTimeout(async()=>{if(this._connectionState===M.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}},t)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}_invokeClientMethod(t){const e=this._methods[t.target.toLowerCase()];if(e){try{e.forEach(e=>e.apply(this,t.arguments))}catch(o){this._logger.log(w["a"].Error,`A callback for the method ${t.target.toLowerCase()} threw error '${o}'.`)}if(t.invocationId){const t="Server requested a response, which is not supported in this version of the client.";this._logger.log(w["a"].Error,t),this._stopPromise=this._stopInternal(new Error(t))}}else this._logger.log(w["a"].Warning,`No client method with the name '${t.target}' found.`)}_connectionClosed(t){this._logger.log(w["a"].Debug,`HubConnection.connectionClosed(${t}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||t||new Error("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(t||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===M.Disconnecting?this._completeClose(t):this._connectionState===M.Connected&&this._reconnectPolicy?this._reconnect(t):this._connectionState===M.Connected&&this._completeClose(t)}_completeClose(t){if(this._connectionStarted){this._connectionState=M.Disconnected,this._connectionStarted=!1,m["c"].isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(e=>e.apply(this,[t]))}catch(e){this._logger.log(w["a"].Error,`An onclose callback called with error '${t}' threw error '${e}'.`)}}}async _reconnect(t){const e=Date.now();let o=0,n=void 0!==t?t:new Error("Attempting to reconnect due to a unknown error."),r=this._getNextRetryDelay(o++,0,n);if(null===r)return this._logger.log(w["a"].Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(t);if(this._connectionState=M.Reconnecting,t?this._logger.log(w["a"].Information,`Connection reconnecting because of error '${t}'.`):this._logger.log(w["a"].Information,"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach(e=>e.apply(this,[t]))}catch(s){this._logger.log(w["a"].Error,`An onreconnecting callback called with error '${t}' threw error '${s}'.`)}if(this._connectionState!==M.Reconnecting)return void this._logger.log(w["a"].Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}while(null!==r){if(this._logger.log(w["a"].Information,`Reconnect attempt number ${o} will start in ${r} ms.`),await new Promise(t=>{this._reconnectDelayHandle=setTimeout(t,r)}),this._reconnectDelayHandle=void 0,this._connectionState!==M.Reconnecting)return void this._logger.log(w["a"].Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this._startInternal(),this._connectionState=M.Connected,this._logger.log(w["a"].Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach(t=>t.apply(this,[this.connection.connectionId]))}catch(s){this._logger.log(w["a"].Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${s}'.`)}return}catch(s){if(this._logger.log(w["a"].Information,`Reconnect attempt failed because of error '${s}'.`),this._connectionState!==M.Reconnecting)return this._logger.log(w["a"].Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===M.Disconnecting&&this._completeClose());n=s instanceof Error?s:new Error(s.toString()),r=this._getNextRetryDelay(o++,Date.now()-e,n)}}this._logger.log(w["a"].Information,`Reconnect retries have been exhausted after ${Date.now()-e} ms and ${o} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(t,e,o){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:e,previousRetryCount:t,retryReason:o})}catch(n){return this._logger.log(w["a"].Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${t}, ${e}) threw error '${n}'.`),null}}_cancelCallbacksWithError(t){const e=this._callbacks;this._callbacks={},Object.keys(e).forEach(o=>{const n=e[o];try{n(null,t)}catch(r){this._logger.log(w["a"].Error,`Stream 'error' callback called with '${t}' threw error: ${Object(m["g"])(r)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(t,e,o,n){if(o)return 0!==n.length?{arguments:e,streamIds:n,target:t,type:N.Invocation}:{arguments:e,target:t,type:N.Invocation};{const o=this._invocationId;return this._invocationId++,0!==n.length?{arguments:e,invocationId:o.toString(),streamIds:n,target:t,type:N.Invocation}:{arguments:e,invocationId:o.toString(),target:t,type:N.Invocation}}}_launchStreams(t,e){if(0!==t.length){e||(e=Promise.resolve());for(const o in t)t[o].subscribe({complete:()=>{e=e.then(()=>this._sendWithProtocol(this._createCompletionMessage(o)))},error:t=>{let n;n=t instanceof Error?t.message:t&&t.toString?t.toString():"Unknown error",e=e.then(()=>this._sendWithProtocol(this._createCompletionMessage(o,n)))},next:t=>{e=e.then(()=>this._sendWithProtocol(this._createStreamItemMessage(o,t)))}})}}_replaceStreamingParams(t){const e=[],o=[];for(let n=0;n<t.length;n++){const r=t[n];if(this._isObservable(r)){const s=this._invocationId;this._invocationId++,e[s]=r,o.push(s.toString()),t.splice(n,1)}}return[e,o]}_isObservable(t){return t&&t.subscribe&&"function"===typeof t.subscribe}_createStreamInvocation(t,e,o){const n=this._invocationId;return this._invocationId++,0!==o.length?{arguments:e,invocationId:n.toString(),streamIds:o,target:t,type:N.StreamInvocation}:{arguments:e,invocationId:n.toString(),target:t,type:N.StreamInvocation}}_createCancelInvocation(t){return{invocationId:t,type:N.CancelInvocation}}_createStreamItemMessage(t,e){return{invocationId:t,item:e,type:N.StreamItem}}_createCompletionMessage(t,e,o){return e?{error:e,invocationId:t,type:N.Completion}:{invocationId:t,result:o,type:N.Completion}}}var q=o("bf71");const F="json";class U{constructor(){this.name=F,this.version=1,this.transferFormat=f.Text}parseMessages(t,e){if("string"!==typeof t)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!t)return[];null===e&&(e=q["a"].instance);const o=j.parse(t),n=[];for(const r of o){const t=JSON.parse(r);if("number"!==typeof t.type)throw new Error("Invalid payload.");switch(t.type){case N.Invocation:this._isInvocationMessage(t);break;case N.StreamItem:this._isStreamItemMessage(t);break;case N.Completion:this._isCompletionMessage(t);break;case N.Ping:break;case N.Close:break;default:e.log(w["a"].Information,"Unknown message type '"+t.type+"' ignored.");continue}n.push(t)}return n}writeMessage(t){return j.write(JSON.stringify(t))}_isInvocationMessage(t){this._assertNotEmptyString(t.target,"Invalid payload for Invocation message."),void 0!==t.invocationId&&this._assertNotEmptyString(t.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(t){if(this._assertNotEmptyString(t.invocationId,"Invalid payload for StreamItem message."),void 0===t.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(t){if(t.result&&t.error)throw new Error("Invalid payload for Completion message.");!t.result&&t.error&&this._assertNotEmptyString(t.error,"Invalid payload for Completion message."),this._assertNotEmptyString(t.invocationId,"Invalid payload for Completion message.")}_assertNotEmptyString(t,e){if("string"!==typeof t||""===t)throw new Error(e)}}const B={trace:w["a"].Trace,debug:w["a"].Debug,info:w["a"].Information,information:w["a"].Information,warn:w["a"].Warning,warning:w["a"].Warning,error:w["a"].Error,critical:w["a"].Critical,none:w["a"].None};function z(t){const e=B[t.toLowerCase()];if("undefined"!==typeof e)return e;throw new Error("Unknown log level: "+t)}class J{configureLogging(t){if(m["a"].isRequired(t,"logging"),X(t))this.logger=t;else if("string"===typeof t){const e=z(t);this.logger=new m["b"](e)}else this.logger=new m["b"](t);return this}withUrl(t,e){return m["a"].isRequired(t,"url"),m["a"].isNotEmpty(t,"url"),this.url=t,this.httpConnectionOptions="object"===typeof e?{...this.httpConnectionOptions,...e}:{...this.httpConnectionOptions,transport:e},this}withHubProtocol(t){return m["a"].isRequired(t,"protocol"),this.protocol=t,this}withAutomaticReconnect(t){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return t?Array.isArray(t)?this.reconnectPolicy=new r(t):this.reconnectPolicy=t:this.reconnectPolicy=new r,this}build(){const t=this.httpConnectionOptions||{};if(void 0===t.logger&&(t.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const e=new D(this.url,t);return L.create(e,this.logger||q["a"].instance,this.protocol||new U,this.reconnectPolicy)}}function X(t){return void 0!==t.log}},bf71:function(t,e,o){"use strict";o.d(e,"a",(function(){return n}));class n{constructor(){}log(t,e){}}n.instance=new n}}]);